//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Z4NetScheduler.ServiceZDevices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecificDeviceDto", Namespace="http://schemas.datacontract.org/2004/07/Z4Net.Services.Dto")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Z4NetScheduler.ServiceZDevices.SwitchBinaryDto))]
    public partial class SpecificDeviceDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HomeIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Z4NetScheduler.ServiceZDevices.DeviceClassGeneric TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZIdentifierField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HomeIdentifier {
            get {
                return this.HomeIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.HomeIdentifierField, value) != true)) {
                    this.HomeIdentifierField = value;
                    this.RaisePropertyChanged("HomeIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Identifier {
            get {
                return this.IdentifierField;
            }
            set {
                if ((this.IdentifierField.Equals(value) != true)) {
                    this.IdentifierField = value;
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Z4NetScheduler.ServiceZDevices.DeviceClassGeneric Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZIdentifier {
            get {
                return this.ZIdentifierField;
            }
            set {
                if ((this.ZIdentifierField.Equals(value) != true)) {
                    this.ZIdentifierField = value;
                    this.RaisePropertyChanged("ZIdentifier");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SwitchBinaryDto", Namespace="http://schemas.datacontract.org/2004/07/Z4Net.Services.Dto.Devices")]
    [System.SerializableAttribute()]
    public partial class SwitchBinaryDto : Z4NetScheduler.ServiceZDevices.SpecificDeviceDto {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceClassGeneric", Namespace="http://schemas.datacontract.org/2004/07/Z4Net.Dto.Devices")]
    public enum DeviceClassGeneric : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StaticController = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AvControlPoiunt = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Display = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Thermostat = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchBinary = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchMultilevel = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchRemote = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchToggle = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ventilation = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SensorBinary = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SensorMultilevel = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MeterPulse = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Meter = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EentyControl = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlarmSensor = 161,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceZDevices.IZDeviceService")]
    public interface IZDeviceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZDeviceService/ListDevices", ReplyAction="http://tempuri.org/IZDeviceService/ListDevicesResponse")]
        System.Collections.Generic.List<Z4NetScheduler.ServiceZDevices.SpecificDeviceDto> ListDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZDeviceService/ListDevices", ReplyAction="http://tempuri.org/IZDeviceService/ListDevicesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Z4NetScheduler.ServiceZDevices.SpecificDeviceDto>> ListDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZDeviceService/Close", ReplyAction="http://tempuri.org/IZDeviceService/CloseResponse")]
        void Close();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZDeviceService/Close", ReplyAction="http://tempuri.org/IZDeviceService/CloseResponse")]
        System.Threading.Tasks.Task CloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZDeviceService/SwitchBinary_ChangeState", ReplyAction="http://tempuri.org/IZDeviceService/SwitchBinary_ChangeStateResponse")]
        bool SwitchBinary_ChangeState(Z4NetScheduler.ServiceZDevices.SwitchBinaryDto device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZDeviceService/SwitchBinary_ChangeState", ReplyAction="http://tempuri.org/IZDeviceService/SwitchBinary_ChangeStateResponse")]
        System.Threading.Tasks.Task<bool> SwitchBinary_ChangeStateAsync(Z4NetScheduler.ServiceZDevices.SwitchBinaryDto device);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IZDeviceServiceChannel : Z4NetScheduler.ServiceZDevices.IZDeviceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ZDeviceServiceClient : System.ServiceModel.ClientBase<Z4NetScheduler.ServiceZDevices.IZDeviceService>, Z4NetScheduler.ServiceZDevices.IZDeviceService {
        
        public ZDeviceServiceClient() {
        }
        
        public ZDeviceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ZDeviceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ZDeviceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ZDeviceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Z4NetScheduler.ServiceZDevices.SpecificDeviceDto> ListDevices() {
            return base.Channel.ListDevices();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Z4NetScheduler.ServiceZDevices.SpecificDeviceDto>> ListDevicesAsync() {
            return base.Channel.ListDevicesAsync();
        }
        
        public void Close() {
            base.Channel.Close();
        }
        
        public System.Threading.Tasks.Task CloseAsync() {
            return base.Channel.CloseAsync();
        }
        
        public bool SwitchBinary_ChangeState(Z4NetScheduler.ServiceZDevices.SwitchBinaryDto device) {
            return base.Channel.SwitchBinary_ChangeState(device);
        }
        
        public System.Threading.Tasks.Task<bool> SwitchBinary_ChangeStateAsync(Z4NetScheduler.ServiceZDevices.SwitchBinaryDto device) {
            return base.Channel.SwitchBinary_ChangeStateAsync(device);
        }
    }
}
